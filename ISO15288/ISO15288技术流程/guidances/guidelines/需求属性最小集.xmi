<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-xrxeQwt3bpPS2CaH-VqaiQ" name="需求属性最小集,_-hcFoCrIEeqlGtluUHjdnA" guid="-xrxeQwt3bpPS2CaH-VqaiQ" changeDate="2019-12-30T13:56:20.739+0800">
  <mainDescription>&lt;p>&#xD;
    A1 - RATIONALE*&lt;br />&#xD;
    Rationale states the reason for the requirement’s existence. Rationale defines why the requirement&lt;br />&#xD;
    is needed and other information relevant to better understand the reason for and intent of the&lt;br />&#xD;
    requirement. Rationale can also record any assumptions that were made when writing the&lt;br />&#xD;
    requirement, what design effort drove the requirement, and the source of any numbers in the&lt;br />&#xD;
    requirement. Rationale, along with the attributes of Trace to Parent Requirements and Trace to&lt;br />&#xD;
    Source, helps to support the claim that the requirement characteristic “C1 - necessary” is true.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A2 - SYSTEM OF INTEREST (SOI) PRIMARY VERIFICATION METHOD*&lt;br />&#xD;
    The primary verification method (VM) for each requirement states the planned primary method of&lt;br />&#xD;
    verification (test, demonstration, inspection, analysis) that is being proposed to provide proof the&lt;br />&#xD;
    designed and built system meets the requirement. Identifying the SOI primary VM helps ensure the&lt;br />&#xD;
    requirement characteristics “C3- unambiguous”, ”C7 - verifiable”, and ”C8 - correct” are true. This&lt;br />&#xD;
    attribute can be used to build an SOI verification matrix. This attribute may also be classified under&lt;br />&#xD;
    attributes associated with verification and system validation defined in section 5.2.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A4 - TRACE TO PARENT REQUIREMENTS*&lt;br />&#xD;
    Parent requirements at one level are implemented at the next level of the system architecture via&lt;br />&#xD;
    allocation. A child requirement is one that has been derived or decomposed from the allocated&lt;br />&#xD;
    parent; the achievement of each of the children requirements will lead to the achievement of&lt;br />&#xD;
    the parent requirement. Each of the children requirements must be able to be traced to its&lt;br />&#xD;
    parent requirement (and then to any antecedent requirement, and ultimately to the system need/&lt;br />&#xD;
    mission). When managing requirements in a requirement management tool (RMT), when a trace&lt;br />&#xD;
    is established from the child to the parent, a reverse trace is also established between the parent&lt;br />&#xD;
    and that child requirement. This is commonly referred to as “bi-directional” traceability. Having&lt;br />&#xD;
    this knowledge allows you to make sure that all parents have children, each of the children are&lt;br />&#xD;
    necessary and sufficient to meet the intent of the parents, all parents have the correct children, all&lt;br />&#xD;
    children requirements have one parent, and all children requirements have the correct parents.These traces also help to&#xD;
    identify internal interface requirements e.g., if two subsystem requirements&lt;br />&#xD;
    trace to a common functional requirement, there is often an interaction (interface) between the two&lt;br />&#xD;
    subsystems, each having a unique role in meeting the parent requirement. In addition, given the right&lt;br />&#xD;
    side of the engineering “Vee” shown in Figure 4 is a bottom up process, verification that the children&lt;br />&#xD;
    requirements have been met occurs prior to verification that the parent requirement has been met.&lt;br />&#xD;
    Successful completion of verification activities showing that the children requirements have been met&lt;br />&#xD;
    is a prerequisite to verifying the parent has been met. The attribute Trace to Parent Requirements,&lt;br />&#xD;
    along with Rationale and Trace to Source, helps to ensure the requirement characteristic of ‘C1&lt;br />&#xD;
    - necessary’ is met. This attribute may also be classified under attributes used to manage the&lt;br />&#xD;
    requirement.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A5 - TRACE TO SOURCE*&lt;br />&#xD;
    Each requirement must be able to be traced to its source (such as document, trade study, workshop,&lt;br />&#xD;
    or interview). This is different from tracing to a parent requirement because it identifies where the&lt;br />&#xD;
    requirement came from and/or how it was arrived at (rather which requirement is its parent). The&lt;br />&#xD;
    source could be a stakeholder need or some form of model. Examples of sources include system&lt;br />&#xD;
    concepts, user stories, use cases, regulations, standards, derived from a trade study, interviews&lt;br />&#xD;
    with a stakeholder, minutes of stakeholder workshop, or Engineering Change Proposal (ECP).&lt;br />&#xD;
    Sources could also be a functional area within an enterprise or business unit (marketing, safety,&lt;br />&#xD;
    compliance, quality, engineering, manufacturing, etc.). Maintaining this trace is key to being able to&lt;br />&#xD;
    show compliance to customer requirements, regulations, and standards. Trace to Source, along with&lt;br />&#xD;
    Rationale and Trace to Parent Requirements, helps to ensure the requirement characteristic of “C1 -&lt;br />&#xD;
    necessary” is met.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A12 - UNIQUE IDENTIFIER*&lt;br />&#xD;
    A unique identifier, which can be either a number or mixture of characters and numbers used to refer&lt;br />&#xD;
    to the specific requirement. The unique identifier is not a paragraph number. It can be a separate&lt;br />&#xD;
    identifier or automatically assigned by whatever RMT the organization is using. This identifier is used&lt;br />&#xD;
    once and never reused. A unique identifier is also used to link requirements in support of the flow&lt;br />&#xD;
    down of requirements (allocation), traceability, and to establish peer-to-peer relationships. Some&lt;br />&#xD;
    organizations include in the unique identifier codes that relate to the SOI or level of architecture to which the&#xD;
    requirement applies: e.g. [SOI]1234. Organizations should never use a document&lt;br />&#xD;
    paragraph number as a requirement unique identifier.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A14 - ORIGINATOR/AUTHOR*&lt;br />&#xD;
    The person submitting the requirement and/or the person responsible for entering the requirement&lt;br />&#xD;
    into the RMT. When entering a requirement into an RMT, the RMT may automatically log the name of&lt;br />&#xD;
    the person entering the requirement.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A16 - OWNER*&lt;br />&#xD;
    The person or element of the organization that maintains the requirement, who has the right to say&lt;br />&#xD;
    something about this requirement, approves changes to the requirement, and reports the status&lt;br />&#xD;
    of the requirement. The Owner could be the Source [of the requirement], but they are two different&lt;br />&#xD;
    attributes. The Owner maintains the attributes Requirement Verification Status, Requirement&lt;br />&#xD;
    Validation Status, and Status (of requirement) - see below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A25 - REQUIREMENT VERIFICATION STATUS*&lt;br />&#xD;
    An indication that the requirement has been verified. As defined in section 1.7, requirement&lt;br />&#xD;
    verification is the process of ensuring the requirement meets the rules and characteristics (necessary,&lt;br />&#xD;
    singular, conforming, appropriate, correct, unambiguous, complete, feasible, and verifiable) for a&lt;br />&#xD;
    well-formed requirement as defined in this Guide or a comparable guide or checklist developed by the&lt;br />&#xD;
    organization. Possible values could include: true/false, yes/no, or not started, in work, complete.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A26 - REQUIREMENT VALIDATION STATUS*&lt;br />&#xD;
    An indication that the requirement has been validated. As defined in section 1.7, requirement&lt;br />&#xD;
    validation is the confirmation the requirement is an agreed-to transformation that clearly&lt;br />&#xD;
    communicates the needs of the stakeholder expectations in a language understood by the&lt;br />&#xD;
    developers. Requirement validation activities need to involve the customers and users of the system&lt;br />&#xD;
    being developed. Possible values could include: true/false, yes/no, not started, in work, complete.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A31 - PRIORITY*&lt;br />&#xD;
    This is how important the requirement is to the stakeholders. It may not be a critical requirement (that&lt;br />&#xD;
    is, one the system must possess or it won’t work at all), but simply something that the stakeholder(s)&lt;br />&#xD;
    hold very dear. Priority may be characterized in terms of a number (1,2,3) or label (high, medium,&lt;br />&#xD;
    low). Assuming each child requirement is necessary and sufficient, their priority may be inherited&lt;br />&#xD;
    from their parent requirement. High priority requirements must always be met for the project to be&lt;br />&#xD;
    successful; lower priority requirements may be traded off when conflicts occur or when there are&lt;br />&#xD;
    budget or schedule issues resulting in a de-scope effort. If there is a need to trade-off (modify or&lt;br />&#xD;
    delete) a requirement, a change request must be submitted to the organization having configuration&lt;br />&#xD;
    management authority for the set of requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A33 - RISK*&lt;br />&#xD;
    A risk value assigned to each requirement based on risk factors. Requirements that are at risk&lt;br />&#xD;
    include requirements that fail to have the set of characteristics that well-formed requirements must&lt;br />&#xD;
    have: necessary, singular, conforming, appropriate, correct, unambiguous, complete, feasible, and&lt;br />&#xD;
    verifiable. Failing to have these characteristics can result in the requirement not being implemented&lt;br />&#xD;
    (will fail system verification) and entity needs not being realized (will fail system validation). Risk&lt;br />&#xD;
    can also address feasibility/attainability in terms of technology, schedule, cost, politics, etc.. If&lt;br />&#xD;
    the technology needed to meet the requirement is new with a low maturity (low TRL), the risk is&lt;br />&#xD;
    higher than if using a mature technology that has been used successfully in other similar projects.&lt;br />&#xD;
    The requirement can be high risk if the cost and time to develop a technology is outside what has&lt;br />&#xD;
    been planned for the project. Risk may also be inherited from a parent requirement. Risk may be&lt;br />&#xD;
    characterized in terms of a number (1, 2, 3) or a label (high, medium, low). Some organizations&lt;br />&#xD;
    communicate Risk as a cross product of likelihood and impact (a high likelihood and a high impact&lt;br />&#xD;
    would be represented in a risk matrix as 1×1, while a low likelihood and high impact would be&lt;br />&#xD;
    3×1). Some organizations use a 3x3 risk matrix, others a more granular 5x5 matrix. An unstable&lt;br />&#xD;
    requirement is also a risk factor. (See stability as an attribute for more information.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    INCOSE. Guide for Writing Requirements&amp;nbsp;第5章 ATTRIBUTES OF REQUIREMENTS STATEMENTS&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
